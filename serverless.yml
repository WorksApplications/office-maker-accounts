# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: office-maker-tenants

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-tag-api-gateway
  - serverless-tag-cloud-watch-logs
  - serverless-plugin-warmup

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  memorySize: 128
  timeout: 15
  stackTags:
    Name: ${self:service}-${self:provider.stage}
  tags:
    <<: &commonTags
      Production: ${self:service}
      Environment: ${self:provider.stage}
  environment:
    DB_TENANT_NAME: !Ref TenantInfoDynamoDB
    DB_USER_PRI_NAME: !Ref UserPrivilegeDynamoDB
    ADMIN_POOL_ID: !Ref CognitoUserPoolForTenant
    ADMIN_CLIENT_ID: !Ref CognitoUserPoolClientForTenant
    USER_POOL_ID: !Ref CognitoUserPoolForUsers
    USER_CLIENT_ID: !Ref CognitoUserPoolClientForUser
    BASE_URL: ${file(config.yaml):API_BASE_URL}
    TENANT_SAML_NAME_PREFIX: ${self:custom.app}
    WWW_BASE_URL: ${file(config.yaml):WWW_BASE_URL}
        # â†‘ except parse www site address, also works in response to solve CORS

custom:
  app: worksmap
  apiGatewayTags: *commonTags
  cloudWatchLogsTags: *commonTags
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    packagerOptions: {}
    includeModules: true
  publicKey: ${file(./config.yaml):SSM.PUBLIC_KEY}
  privateKey: ${file(./config.yaml):SSM.PRIVATE_KEY}

package:
  individually: true

# The `functions` block defines what code to deploy
functions:
  registerTenant:
    warmup: prod
    handler: src/admin/registerTenant.handler
    name: ${self:service}-${self:provider.stage}-createTenant
    role: !GetAtt AllPermissionRole.Arn
    events: # POST tenants/tenant=<tenant>
      - http:
          path: admin/tenants
          method: post
          cors: true
          <<: &cognitoAdminAuthorizer
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId: !Ref APIGatewayAuthorizerForTenant

  deleteTenant:
    warmup: prod
    handler: src/admin/deleteTenant.handler
    name: ${self:service}-${self:provider.stage}-deleteTenant
    events: # DELETE tenants/{tenant_name}
      - http:
          path: admin/tenants/{tenant_name}
          method: delete
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  checkTenant:
    warmup: prod
    handler: src/admin/checkTenant.handler
    name: ${self:service}-${self:provider.stage}-checkTenant
    events: # HEAD admin/tenants/{tenant_name}
      - http:
          path: admin/tenants/{tenant_name}
          method: head
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  getTenants:
    warmup: prod
    handler: src/admin/getTenants.handler
    name: ${self:service}-${self:provider.stage}-getTenants
    events:
      - http:
          path: admin/tenants
          method: get
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn


  setTenantOptionsInfo:
    warmup: prod
    handler: src/admin/setTenantOptionsInfo.handler
    name: ${self:service}-${self:provider.stage}-setTenantOptions
    events: # post admin/tenants/{tenant}/info/options
      #     body{
      #      enableLoginFree: string | boolean
      #      loginFreeIPs: string[] | undefined
      #      enableLoginRestrict: string | boolean
      #      loginRestrictIPs: string[] | undefined
      #      bufferTime: string
      #    }
      - http:
          path: admin/tenants/{tenant_name}/info/options
          method: post
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn
    environment:
      DEFAULT_LOGIN_BUFFER_TIME: '1800'

  setTenantRequiredInfo:
    warmup: prod
    handler: src/admin/setTenantRequiredInfo.handler
    name: ${self:service}-${self:provider.stage}-setTenantRequired
    events:
      # body{
      #      jwtExpireTime?: string | undefined
      #      stateExpireTime?: string | undefined
      #      redirectUrl?: string | undefined
      # }   if undefined, will use default value   json
      - http:
          path: admin/tenants/{tenant_name}/info/required
          method: post
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  worksmapSAMLInfo:
    warmup: prod
    handler: src/admin/worksmapSAMLInfo.handler
    name: ${self:service}-${self:provider.stage}-worksmapSAMLInfo
    events:
      - http:
          path: admin/client-info
          method: get
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  registerSAMLProvider:
    warmup: prod
    handler: src/admin/SAMLProviderRegister.handler
    name: ${self:service}-${self:provider.stage}-addSAMLProvider
    events: # POST saml-providers/tenant=<tenant> body {metadata | metadataUrl }
      - http:
          path: admin/providers
          method: post
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  updateSAMLProvider:
    warmup: prod
    handler: src/admin/SAMLProviderUpdate.handler
    name: ${self:service}-${self:provider.stage}-updateSAMLProvider
    events: # POST admin/providers/{tenant} body: {metadata | metadataUrl}
      - http:
          path: admin/providers/{tenant}
          method: post
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  deleteSAMLProvider:
    warmup: prod
    handler: src/admin/SAMLProviderDelete.handler
    name: ${self:service}-${self:provider.stage}-deleteSAMLProvider
    events: # delete admin/providers/{tenant}
      - http:
          path: admin/providers/{tenant}
          method: delete
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  getSAMLProvider:
    warmup: prod
    handler: src/admin/SAMLProviderGet.handler
    name: ${self:service}-${self:provider.stage}-getSAMLProvider
    events: # get admin/providers/{tenant}
      - http:
          path: admin/providers/{tenant}
          method: get
          cors: true
          <<: *cognitoAdminAuthorizer
    role: !GetAtt AllPermissionRole.Arn

  userActionOptions:
    warmup: prod
    handler: src/user/options.header
    name: ${self:service}-${self:provider.stage}-userActionOptions
    events:
      - http:
          path: login/
          method: options
      - http:
          path: login/refresh/
          method: options
      - http:
          path: saml/login/callback
          method: options
    role: !GetAtt AllPermissionRole.Arn

  userLogin:
    warmup: prod
    handler: src/user/userLogin.handler
    name: ${self:service}-${self:provider.stage}-userLogin
    events: # get /login?tenant=<tenant>&method=<saml|guest|...>&state=<redirect_url>
      - http:
          path: login/
          method: get
    role: !GetAtt AllPermissionRole.Arn
    environment:
      COGNITO_DOMAIN: ${file(config.yaml):COGNITO.USERS_USER_POOL_COGNITO_DOMAIN}
      COGNITO_REGION: ${self:provider.region}
      COGNITO_USER_CLIENT_ID: !Ref CognitoUserPoolClientForUser
      privateKey: ${self:custom.privateKey}

  userLoginRefresh:
    warmup: prod
    handler: src/user/loginRefresh.handler
    name: ${self:service}-${self:provider.stage}-userLoginRefresh
    events: # get /login/refresh?tenant=<tenant>&method=<saml|guest|...>&state=<redirect_url>
      - http:
          path: login/refresh/
          method: get
    role: !GetAtt AllPermissionRole.Arn
    environment:
      COGNITO_DOMAIN: ${file(config.yaml):COGNITO.USERS_USER_POOL_COGNITO_DOMAIN}
      COGNITO_REGION: ${self:provider.region}
      COGNITO_USER_CLIENT_ID: !Ref CognitoUserPoolClientForUser
      privateKey: ${self:custom.privateKey}
      publicKey: ${self:custom.publicKey}

  userLoginCallback:
    warmup: prod
    handler: src/user/samlLoginHandler.handler
    name: ${self:service}-${self:provider.stage}-samlLoginHandler
    events:
      - http:
          path: saml/login/callback
          method: get
          cors: true
    role: !GetAtt AllPermissionRole.Arn
    environment:
      publicKey: ${self:custom.publicKey}
      privateKey: ${self:custom.privateKey}
      COGNITO_DOMAIN: ${file(config.yaml):COGNITO.USERS_USER_POOL_COGNITO_DOMAIN}
      COGNITO_REGION: ${self:provider.region}
      COGNITO_USER_CLIENT_ID: !Ref CognitoUserPoolClientForUser

resources:
  Resources: ${file(cloudformation/cf_for_serverless.yaml):Resources}
  Outputs: ${file(cloudformation/cf_for_serverless.yaml):Outputs}
